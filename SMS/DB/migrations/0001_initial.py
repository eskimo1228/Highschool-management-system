# Generated by Django 2.2.5 on 2020-02-12 11:44

import DB.validators
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session', models.CharField(max_length=200, unique=True)),
                ('session_starts_on', models.DateField(blank=True, null=True)),
                ('session_ends_on', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=250)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number', models.CharField(max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='AttendanceStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='"Present" will not be saved but may show as a teacher option.', max_length=255, unique=True)),
                ('code', models.CharField(help_text='Short code used on attendance reports. Ex: A might be the code for the name Absent', max_length=10, unique=True)),
                ('teacher_selectable', models.BooleanField()),
                ('excused', models.BooleanField()),
                ('absent', models.BooleanField(help_text='Some statistics need to add various types of absent statuses, such as the number in parathesis in daily attendance')),
                ('tardy', models.BooleanField(help_text='Some statistics need to add various types of tardy statuses, such as the number in parathesis in daily attendance')),
                ('half', models.BooleanField(help_text='Half attendance when counting. DO NOT check off absent otherwise it will double count!')),
            ],
            options={
                'verbose_name_plural': 'Attendance Statuses',
            },
        ),
        migrations.CreateModel(
            name='ClassRoom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('capacity', models.IntegerField(blank=True, default=25, help_text='Enter total number of sits defaults is set to 25')),
                ('occupied_sits', models.IntegerField(blank=True, default=0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Dormitory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('capacity', models.PositiveIntegerField(blank=True, null=True)),
                ('occupied_beds', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ExaminationListHandler',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('start_on_date', models.DateField()),
                ('ends_on_date', models.DateField()),
                ('out_of', models.IntegerField()),
                ('comments', models.CharField(blank=True, help_text='Comments Regarding Exam', max_length=200, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('middle_name', models.CharField(blank=True, max_length=50, null=True)),
                ('last_name', models.CharField(max_length=50)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=10, null=True)),
                ('parent_type', models.CharField(choices=[('Father', 'Father'), ('Mother', 'Mother'), ('Guardian', 'Guardian')], max_length=10)),
                ('address', models.CharField(max_length=150)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number', models.CharField(default='+254', max_length=20)),
                ('nationality', models.CharField(blank=True, max_length=100, null=True)),
                ('national_id', models.CharField(blank=True, max_length=100, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('image', models.ImageField(blank=True, upload_to='ParentsImages')),
            ],
        ),
        migrations.CreateModel(
            name='Stream',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, validators=[DB.validators.stream_validator])),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('unique_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=50)),
                ('middle_name', models.CharField(blank=True, max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=10)),
                ('religion', models.CharField(blank=True, max_length=50, null=True)),
                ('blood_group', models.CharField(blank=True, max_length=10, null=True)),
                ('date_of_birth', models.DateField(validators=[DB.validators.students_date_of_birth_validator])),
                ('admission_date', models.DateTimeField(auto_now_add=True)),
                ('admission_number', models.CharField(blank=True, max_length=50)),
                ('image', models.ImageField(blank=True, upload_to='StudentsImages')),
                ('parent', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='child', to='DB.Parent')),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, validators=[DB.validators.subject_validator])),
                ('subject_code', models.CharField(blank=True, max_length=10, null=True)),
                ('is_selectable', models.BooleanField(blank=True, default=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=False)),
                ('is_lecturer', models.BooleanField(default=False)),
                ('is_parent', models.BooleanField(default=False)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='user_pictures/')),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='DB.Address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(blank=True, choices=[('ONE', 'One'), ('TWO', 'Two'), ('THREE', 'Three')], max_length=10)),
                ('term_start_on', models.DateField(blank=True, null=True)),
                ('term_ends_on', models.DateField(blank=True, null=True)),
                ('academic_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='academic_term', to='DB.AcademicYear')),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('teacher_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('nationality', models.CharField(blank=True, max_length=100, null=True)),
                ('national_id', models.CharField(blank=True, max_length=100, null=True)),
                ('address', models.CharField(max_length=100)),
                ('phone_number', models.CharField(default='+254', max_length=25)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('slug', models.SlugField(blank=True)),
                ('designation', models.CharField(blank=True, max_length=100, null=True)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=10)),
                ('image', models.ImageField(blank=True, null=True, upload_to='TeachersImages')),
                ('subject_teaching', models.ManyToManyField(blank=True, to='DB.Subject')),
            ],
        ),
        migrations.CreateModel(
            name='SubjectAllocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(blank=True, choices=[('ONE', 'One'), ('TWO', 'Two'), ('THREE', 'Three')], max_length=10, null=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.AcademicYear')),
                ('class_room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='DB.ClassRoom')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocated_subjects', to='DB.Subject')),
                ('teacher_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.Teacher')),
            ],
        ),
        migrations.CreateModel(
            name='StudentClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.AcademicYear')),
                ('main_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_student', to='DB.ClassRoom')),
                ('student_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_class', to='DB.Student')),
            ],
        ),
        migrations.CreateModel(
            name='SchoolEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('term', models.CharField(blank=True, choices=[('ONE', 'One'), ('TWO', 'Two'), ('THREE', 'Three')], max_length=10, null=True)),
                ('starts_on', models.DateField()),
                ('ends_on', models.DateField(blank=True, null=True)),
                ('academic_year', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='DB.AcademicYear')),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('school_type', models.CharField(blank=True, choices=[('boarding school', 'boarding school'), ('day school', 'day school'), ('boarding-day school', 'boarding-day school')], max_length=25, null=True)),
                ('students_gender', models.CharField(blank=True, choices=[('Boys School', 'Boys School'), ('Girl School', 'Girl School'), ('Mixed', 'Mixed')], max_length=25, null=True)),
                ('ownership', models.CharField(blank=True, choices=[('Government', 'Government'), ('Private', 'Private')], max_length=25, null=True)),
                ('classification', models.CharField(blank=True, choices=[('National', 'National'), ('Extra County', 'Extra County'), ('County', 'County'), ('Sub County', 'Sub County')], max_length=30, null=True)),
                ('mission', models.TextField(blank=True, null=True)),
                ('vision', models.TextField(blank=True, null=True)),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='DB.Address')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gpa', models.FloatField(null=True)),
                ('cat_gpa', models.FloatField(null=True)),
                ('term', models.CharField(blank=True, choices=[('ONE', 'One'), ('TWO', 'Two'), ('THREE', 'Three')], max_length=10, null=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.AcademicYear')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.Student')),
            ],
        ),
        migrations.CreateModel(
            name='RepeatingStudent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(blank=True, choices=[('ONE', 'One'), ('TWO', 'Two'), ('THREE', 'Three')], max_length=10, null=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.AcademicYear')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.Student')),
            ],
        ),
        migrations.CreateModel(
            name='MarksManagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_scored', models.FloatField()),
                ('date_time', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='marks_entered', to='DB.Teacher')),
                ('exam_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_marks', to='DB.ExaminationListHandler')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_marks', to='DB.StudentClass')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_marks', to='DB.Subject')),
            ],
        ),
        migrations.AddField(
            model_name='examinationlisthandler',
            name='academic_term',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='academic_term_exam', to='DB.Term'),
        ),
        migrations.AddField(
            model_name='examinationlisthandler',
            name='classrooms',
            field=models.ManyToManyField(related_name='class_exams', to='DB.ClassRoom'),
        ),
        migrations.AddField(
            model_name='examinationlisthandler',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='DB.Teacher'),
        ),
        migrations.CreateModel(
            name='DormitoryAllocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_from', models.DateField(auto_now_add=True)),
                ('date_till', models.DateField(blank=True, null=True)),
                ('dormitory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.Dormitory')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.Student')),
            ],
        ),
        migrations.AddField(
            model_name='dormitory',
            name='captain',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='DB.Student'),
        ),
        migrations.AddField(
            model_name='classroom',
            name='class_teacher',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='DB.Teacher'),
        ),
        migrations.AddField(
            model_name='classroom',
            name='stream_id',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='class_stream', to='DB.Stream'),
        ),
        migrations.CreateModel(
            name='CarryOverStudent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(blank=True, choices=[('ONE', 'One'), ('TWO', 'Two'), ('THREE', 'Three')], max_length=10, null=True)),
                ('academic_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='DB.AcademicYear')),
                ('class_room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.ClassRoom')),
                ('stream', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='DB.Stream')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.Student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentAttendance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attendance_date', models.DateField()),
                ('notes', models.CharField(blank=True, max_length=150)),
                ('private_notes', models.CharField(blank=True, max_length=500)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='DB.AttendanceStatus')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_attendance', to='DB.Student')),
            ],
            options={
                'ordering': ('-attendance_date', 'student'),
                'unique_together': {('student', 'attendance_date', 'status')},
            },
        ),
    ]
