# Generated by Django 2.2.5 on 2020-02-23 11:17

import DB.validators
from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('graduation_date', models.DateField(blank=True, help_text='The date when students graduate', null=True)),
                ('active_year', models.BooleanField(help_text='DANGER!! This is the current school year. There can only be one and setting this will remove it from other years. If you want to change the active year you almost certainly want to click Admin, Change School Year.')),
            ],
            options={
                'ordering': ('-start_date',),
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_1', models.CharField(max_length=250)),
                ('address_2', models.CharField(blank=True, max_length=255)),
                ('address_3', models.CharField(blank=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='ClassRoom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('capacity', models.IntegerField(blank=True, default=25, help_text='Enter total number of sits default is set to 25')),
                ('occupied_sits', models.IntegerField(blank=True, default=0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClassYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(help_text='Example 2020', max_length=100, unique=True)),
                ('full_name', models.CharField(blank=True, help_text='Example Class of 2020', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Dormitory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('capacity', models.PositiveIntegerField(blank=True, null=True)),
                ('occupied_beds', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EmergencyContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('f_name', models.CharField(max_length=255, verbose_name='First Name')),
                ('m_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Middle Name')),
                ('l_name', models.CharField(max_length=255, verbose_name='Last Name')),
                ('relationship_to_student', models.CharField(blank=True, max_length=50)),
                ('street', models.CharField(blank=True, help_text='include apt number', max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('primary_contact', models.BooleanField(default=True, help_text='This contact is where mailings and sms should be dent to')),
                ('emergency_only', models.BooleanField(help_text='Only contact in case of emergency')),
            ],
            options={
                'verbose_name': 'Student Contact',
                'ordering': ('primary_contact', 'emergency_only', 'l_name'),
            },
        ),
        migrations.CreateModel(
            name='ExaminationListHandler',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('ends_date', models.DateField()),
                ('out_of', models.IntegerField()),
                ('comments', models.CharField(blank=True, help_text='Comments Regarding Exam', max_length=200, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('classrooms', models.ManyToManyField(related_name='class_exams', to='DB.ClassRoom')),
            ],
        ),
        migrations.CreateModel(
            name='GradeLevel',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='Grade Level')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='MessageToParent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(help_text='this message will be shown to Parents when they log in')),
                ('start_date', models.DateField(default=django.utils.timezone.now, help_text='If blank the message will be posted starting today')),
                ('end_date', models.DateField(default=django.utils.timezone.now, help_text='if blank the message will end today')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inactive', models.BooleanField(default=False)),
                ('username', models.CharField(max_length=250, unique=True)),
                ('first_name', models.CharField(max_length=300, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=300, verbose_name='Last Name')),
                ('nationality', django_countries.fields.CountryField(blank=True, max_length=2)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=10)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
            ],
            options={
                'ordering': ('first_name', 'last_name'),
            },
        ),
        migrations.CreateModel(
            name='ReasonLeft',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Stream',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, validators=[DB.validators.stream_validator])),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('short_name', models.CharField(max_length=150)),
                ('subject_code', models.CharField(blank=True, max_length=10, null=True, unique=True)),
                ('is_selectable', models.BooleanField(blank=True, default=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TranscriptNoteChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='FamilyAccessUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='DB.Person')),
                ('middle_name', models.CharField(blank=True, max_length=50, null=True)),
                ('parent_type', models.CharField(choices=[('Father', 'Father'), ('Mother', 'Mother'), ('Guardian', 'Guardian')], max_length=10)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('phone_number', models.CharField(help_text='personal phone number', max_length=150)),
                ('national_id', models.CharField(blank=True, max_length=100, null=True)),
                ('occupation', models.CharField(blank=True, help_text='current occupation', max_length=255)),
                ('monthly_income', models.FloatField(blank=True, help_text='parents average monthly income')),
                ('single_parent', models.BooleanField(blank=True, default=False, help_text='is he/she a single parent')),
                ('alt_email', models.EmailField(blank=True, help_text='personal Email ', max_length=254, null=True)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('image', models.ImageField(blank=True, upload_to='Parent_images')),
            ],
            bases=('DB.person',),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='DB.Person')),
                ('unique_id', models.AutoField(primary_key=True, serialize=False)),
                ('middle_name', models.CharField(blank=True, max_length=50)),
                ('graduation_date', models.DateField(blank=True, null=True)),
                ('date_dismissed', models.DateField(blank=True, null=True)),
                ('religion', models.CharField(blank=True, max_length=50, null=True)),
                ('blood_group', models.CharField(blank=True, max_length=10, null=True)),
                ('date_of_birth', models.DateField()),
                ('admission_date', models.DateTimeField(auto_now_add=True)),
                ('admission_number', models.CharField(blank=True, max_length=50, unique=True)),
                ('image', models.ImageField(blank=True, upload_to='StudentsImages')),
                ('cache_gpa', models.DecimalField(blank=True, decimal_places=2, editable=False, max_digits=5, null=True)),
                ('class_of_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='DB.ClassYear')),
                ('grade_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='DB.GradeLevel')),
                ('parent_guardian', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='child', to='DB.Parent')),
                ('reason_left', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='DB.ReasonLeft')),
            ],
            bases=('DB.person',),
        ),
        migrations.CreateModel(
            name='StudentClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.AcademicYear')),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_student', to='DB.ClassRoom')),
                ('student_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_class', to='DB.Student')),
            ],
        ),
        migrations.CreateModel(
            name='SchoolEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('term', models.CharField(blank=True, choices=[('ONE', 'One'), ('TWO', 'Two'), ('THREE', 'Three')], max_length=10, null=True)),
                ('starts_on', models.DateField()),
                ('ends_on', models.DateField(blank=True, null=True)),
                ('academic_year', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='DB.AcademicYear')),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('school_type', models.CharField(blank=True, choices=[('boarding school', 'boarding school'), ('day school', 'day school'), ('boarding-day school', 'boarding-day school')], max_length=25, null=True)),
                ('students_gender', models.CharField(blank=True, choices=[('Boys School', 'Boys School'), ('Girl School', 'Girl School'), ('Mixed', 'Mixed')], max_length=25, null=True)),
                ('ownership', models.CharField(blank=True, choices=[('Government', 'Government'), ('Private', 'Private')], max_length=25, null=True)),
                ('classification', models.CharField(blank=True, choices=[('National', 'National'), ('Extra County', 'Extra County'), ('County', 'County'), ('Sub County', 'Sub County')], max_length=30, null=True)),
                ('mission', models.TextField(blank=True, null=True)),
                ('vision', models.TextField(blank=True, null=True)),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='DB.Address')),
            ],
        ),
        migrations.CreateModel(
            name='ImportLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('import_file', models.FileField(upload_to='imported_files')),
                ('database_backup', models.FileField(blank=True, null=True, upload_to='db_dumps')),
                ('user_note', models.CharField(blank=True, max_length=1024)),
                ('errors', models.BooleanField()),
                ('user', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='classroom',
            name='grade_level',
            field=models.ForeignKey(blank=True, help_text="the grade level of the class ie: 'form one is in Grade one' ", null=True, on_delete=django.db.models.deletion.SET_NULL, to='DB.GradeLevel'),
        ),
        migrations.AddField(
            model_name='classroom',
            name='stream',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='class_stream', to='DB.Stream'),
        ),
        migrations.CreateModel(
            name='TranscriptNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True)),
                ('predefined_note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='DB.TranscriptNoteChoice')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.Student')),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='DB.Person')),
                ('teacher_id', models.CharField(max_length=255, unique=True)),
                ('middle_name', models.CharField(blank=True, max_length=100)),
                ('national_id', models.CharField(blank=True, max_length=100, null=True)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('phone_number', models.CharField(max_length=150)),
                ('alt_email', models.EmailField(blank=True, help_text='Personal Email apart from the one given by the school', max_length=254, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('designation', models.CharField(blank=True, max_length=255, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='Teacher_images')),
                ('subject_specialization', models.ManyToManyField(blank=True, to='DB.Subject')),
            ],
            bases=('DB.person',),
        ),
        migrations.CreateModel(
            name='SubjectAllocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(blank=True, choices=[('ONE', 'One'), ('TWO', 'Two'), ('THREE', 'Three')], max_length=10, null=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.AcademicYear')),
                ('class_room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='DB.ClassRoom')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocated_subjects', to='DB.Subject')),
                ('teacher_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.Teacher')),
            ],
        ),
        migrations.CreateModel(
            name='StudentsPreviousAcademicHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('former_school', models.CharField(help_text='Former school name', max_length=255)),
                ('last_gpa', models.FloatField()),
                ('notes', models.CharField(blank=True, help_text='Indicate students academic performance according to your observation', max_length=255)),
                ('academic_record', models.FileField(blank=True, upload_to='students_former_academic_files')),
                ('students_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.Student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentsMedicalHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('history', models.TextField()),
                ('file', models.FileField(blank=True, null=True, upload_to='students_medical_files')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.Student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentHealthRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record', models.TextField()),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.Student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='student_files')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.Student')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gpa', models.FloatField(null=True)),
                ('cat_gpa', models.FloatField(null=True)),
                ('term', models.CharField(blank=True, choices=[('ONE', 'One'), ('TWO', 'Two'), ('THREE', 'Three')], max_length=10, null=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.AcademicYear')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.Student')),
            ],
        ),
        migrations.CreateModel(
            name='RepeatingStudent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(blank=True, choices=[('ONE', 'One'), ('TWO', 'Two'), ('THREE', 'Three')], max_length=10, null=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.AcademicYear')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.Student')),
            ],
        ),
        migrations.CreateModel(
            name='MarksManagement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_scored', models.FloatField()),
                ('date_time', models.DateTimeField(auto_now_add=True)),
                ('exam_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_marks', to='DB.ExaminationListHandler')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_marks', to='DB.StudentClass')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_marks', to='DB.Subject')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='marks_entered', to='DB.Teacher')),
            ],
        ),
        migrations.AddField(
            model_name='examinationlisthandler',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='DB.Teacher'),
        ),
        migrations.CreateModel(
            name='DormitoryAllocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_from', models.DateField(auto_now_add=True)),
                ('date_till', models.DateField(blank=True, null=True)),
                ('dormitory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.Dormitory')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.Student')),
            ],
        ),
        migrations.AddField(
            model_name='dormitory',
            name='captain',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='DB.Student'),
        ),
        migrations.AddField(
            model_name='classroom',
            name='class_teacher',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='DB.Teacher'),
        ),
        migrations.CreateModel(
            name='CarryOverStudent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(blank=True, choices=[('ONE', 'One'), ('TWO', 'Two'), ('THREE', 'Three')], max_length=10, null=True)),
                ('academic_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='DB.AcademicYear')),
                ('class_room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.ClassRoom')),
                ('stream', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='DB.Stream')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DB.Student')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='classroom',
            unique_together={('name', 'stream')},
        ),
    ]
